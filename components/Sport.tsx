'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Clock, Users, Star, AlertTriangle, Lightbulb, Eye, Volume2, Shuffle, RefreshCw } from 'lucide-react';

// ÂØºÂÖ•Êï∞ÊçÆ
import sportData from '@/public/data/sport_recommendations.json';

interface SportRecipe {
  id: number;
  name: string;
  difficulty: string;
  time: string;
  servings: string;
  description: string;
  emoji: string;
  subtitle: string;
  warning?: string;
  safety?: string[];
  tools: string[];
  ingredients: Array<{
    name: string;
    amount: string;
    note: string;
  }>;
  steps: Array<{
    step: number;
    action: string;
    detail: string;
    warning?: string;
    pro_tip?: string;
    visual_clue?: string;
    success_sign?: string;
    abnormal?: string;
    time_control?: string;
    temp_target?: string;
    drink_tip?: string;
    purpose?: string;
    technique?: string;
    timing?: string;
    temp_note?: string;
    check?: string;
    tool?: string;
    output?: string;
    effect?: string;
    sound_clue?: string;
    visual_check?: string;
  }>;
}

const OptionButton = ({ 
  option, 
  isSelected, 
  onClick,
  colorScheme = 'blue',
  disabled = false
}: { 
  option: { emoji: string; text: string; value: string; desc?: string };
  isSelected: boolean;
  onClick: () => void;
  colorScheme?: string;
  disabled?: boolean;
}) => {
  const colorClasses = {
    amber: isSelected 
      ? 'bg-amber-100 text-amber-800 ring-2 ring-amber-300 shadow-sm' 
      : 'bg-gray-50 text-gray-700 hover:bg-gray-100',
    green: isSelected 
      ? 'bg-green-100 text-green-800 ring-2 ring-green-300 shadow-sm' 
      : 'bg-gray-50 text-gray-700 hover:bg-gray-100',
    blue: isSelected 
      ? 'bg-blue-100 text-blue-800 ring-2 ring-blue-300 shadow-sm' 
      : 'bg-gray-50 text-gray-700 hover:bg-gray-100'
  };

  return (
    <button
      onClick={onClick}
      disabled={disabled}
      className={`
        inline-flex items-center gap-2 px-4 py-2 rounded-full text-sm font-medium
        transition-all duration-200 hover:scale-105 hover:shadow-md
        ${disabled ? 'opacity-50 cursor-not-allowed' : ''}
        ${colorClasses[colorScheme as keyof typeof colorClasses]}
      `}
    >
      <span className="text-base">{option.emoji}</span>
      <span>{option.text}</span>
      {option.desc && <span className="text-xs text-gray-500 ml-2">{option.desc}</span>}
    </button>
  );
};

export default function Sport() {
  // Sport options - simplified
  const [sportRecipes, setSportRecipes] = useState<SportRecipe[]>([]);
  const [selectedRecipe, setSelectedRecipe] = useState<SportRecipe | null>(null);
  const [showRandomRecipes, setShowRandomRecipes] = useState(false);
  const [randomRecipes, setRandomRecipes] = useState<SportRecipe[]>([]);

  // Selection states
  const [selectedBodyPart, setSelectedBodyPart] = useState('');
  const [selectedSportEquipment, setSelectedSportEquipment] = useState('');
  const [selectedIntensity, setSelectedIntensity] = useState('');
  const [selectedDuration, setSelectedDuration] = useState('');

  const bodyPartOptions = [
    { emoji: 'üí™', text: 'ËÉ∏ÈÉ®', value: 'ËÉ∏ÈÉ®' },
    { emoji: 'üîô', text: 'ËÉåÈÉ®', value: 'ËÉåÈÉ®' },
    { emoji: 'ü§≤', text: 'ËÇ©ÈÉ®', value: 'ËÇ©ÈÉ®' },
    { emoji: 'üí™', text: 'ÊâãËáÇ', value: 'ÊâãËáÇ' },
    { emoji: 'üéØ', text: 'Ê†∏ÂøÉ', value: 'Ê†∏ÂøÉ' },
    { emoji: 'ü¶µ', text: 'ËÖøÈÉ®', value: 'ËÖøÈÉ®' },
    { emoji: 'üçë', text: 'ËáÄÈÉ®', value: 'ËáÄÈÉ®' },
    { emoji: '‚ù§Ô∏è', text: 'ÂÖ®Ë∫´ÊúâÊ∞ß', value: 'ÂÖ®Ë∫´ÊúâÊ∞ß' }
  ];

  const sportEquipmentOptions = [
    { emoji: 'ü§∏', text: 'ÂæíÊâãËÆ≠ÁªÉ', value: 'ÂæíÊâãËÆ≠ÁªÉ' },
    { emoji: 'üèãÔ∏è', text: 'ÂìëÈìÉ', value: 'ÂìëÈìÉ' },
    { emoji: 'üéóÔ∏è', text: 'ÂºπÂäõÂ∏¶', value: 'ÂºπÂäõÂ∏¶' },
    { emoji: '‚öñÔ∏è', text: 'Â£∂ÈìÉ', value: 'Â£∂ÈìÉ' },
    { emoji: 'üèãÔ∏è‚Äç‚ôÇÔ∏è', text: 'Êù†ÈìÉ', value: 'Êù†ÈìÉ' },
    { emoji: 'üèÉ‚Äç‚ôÇÔ∏è', text: 'ÂÅ•Ë∫´Âô®Ê¢∞', value: 'ÂÅ•Ë∫´Âô®Ê¢∞' },
    { emoji: 'üßò', text: 'Áëú‰ºΩÂû´', value: 'Áëú‰ºΩÂû´' },
    { emoji: 'üö´', text: '‰ªÄ‰πàÈÉΩÊ≤°Êúâ', value: '‰ªÄ‰πàÈÉΩÊ≤°Êúâ' }
  ];

  const intensityOptions = [
    { emoji: 'üòå', text: 'ËΩªÊùæ', value: 'ËΩªÊùæ' },
    { emoji: 'üòä', text: 'ÈÄÇ‰∏≠', value: 'ÈÄÇ‰∏≠' },
    { emoji: 'üò§', text: 'È´òÂº∫Â∫¶', value: 'È´òÂº∫Â∫¶' },
    { emoji: 'üî•', text: 'ÊûÅÈôêÊåëÊàò', value: 'ÊûÅÈôêÊåëÊàò' }
  ];

  const durationOptions = [
    { emoji: '‚è±Ô∏è', text: '15ÂàÜÈíü', value: '15ÂàÜÈíü' },
    { emoji: '‚è∞', text: '30ÂàÜÈíü', value: '30ÂàÜÈíü' },
    { emoji: 'üïê', text: '45ÂàÜÈíü', value: '45ÂàÜÈíü' },
    { emoji: '‚è≥', text: '1Â∞èÊó∂+', value: '1Â∞èÊó∂+' }
  ];

  useEffect(() => {
    setSportRecipes(sportData.sport_recipes);
  }, []);

  const getRandomRecipes = () => {
    const shuffled = [...sportRecipes].sort(() => 0.5 - Math.random());
    return shuffled.slice(0, 3);
  };

  const handleRandomize = () => {
    setRandomRecipes(getRandomRecipes());
    setShowRandomRecipes(true);
  };

  // Êñ∞Â¢ûÔºöÊü•ÊâæÂåπÈÖçÁöÑËØ¶ÁªÜËÆ≠ÁªÉÂª∫ËÆÆ
  const getMatchedSportRecipe = () => {
    if (!selectedBodyPart || !selectedSportEquipment || !selectedIntensity || !selectedDuration) return null;
    if (!Array.isArray(sportData)) return null;
    return sportData.find(
      (item: any) =>
        item.bodyPart === selectedBodyPart &&
        item.equipment === selectedSportEquipment &&
        item.intensity === selectedIntensity &&
        item.duration === selectedDuration
    );
  };

  if (selectedRecipe) {
    return (
      <div className="max-w-4xl mx-auto">
        <Button 
          onClick={() => setSelectedRecipe(null)}
          variant="outline"
          className="mb-6 border-blue-300 text-blue-700 hover:bg-blue-50"
        >
          ‚Üê ËøîÂõûÂàóË°®
        </Button>
        
        <Card className="bg-white/90 backdrop-blur-sm border-blue-200/50">
          <CardHeader className="border-b border-blue-100">
            <div className="flex items-start justify-between">
              <div>
                <div className="flex items-center space-x-3 mb-2">
                  <span className="text-5xl">{selectedRecipe.emoji}</span>
                  <div>
                    <CardTitle className="text-2xl text-gray-800">
                      {selectedRecipe.name}
                    </CardTitle>
                    <CardDescription className="text-gray-600 mt-1">
                      {selectedRecipe.subtitle}
                    </CardDescription>
                  </div>
                </div>
              </div>
              <Badge variant="outline" className="border-blue-300 text-blue-700">
                {selectedRecipe.difficulty}
              </Badge>
            </div>
            
            <div className="flex items-center space-x-6 text-sm text-gray-600 mt-4">
              <div className="flex items-center space-x-1">
                <Clock className="w-4 h-4" />
                <span>{selectedRecipe.time}</span>
              </div>
              <div className="flex items-center space-x-1">
                <Users className="w-4 h-4" />
                <span>{selectedRecipe.servings}</span>
              </div>
            </div>

            {selectedRecipe.warning && (
              <div className="mt-4 p-3 bg-red-50 border border-red-200 rounded-lg">
                <div className="flex items-center space-x-2 text-red-700 text-sm font-medium mb-2">
                  <AlertTriangle className="w-4 h-4" />
                  <span>{selectedRecipe.warning}</span>
                </div>
                {selectedRecipe.safety && (
                  <ul className="text-red-600 text-xs space-y-1 ml-6">
                    {selectedRecipe.safety.map((item, index) => (
                      <li key={index}>‚Ä¢ {item}</li>
                    ))}
                  </ul>
                )}
              </div>
            )}
          </CardHeader>

          <CardContent className="p-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              {/* Â∑•ÂÖ∑ÂíåÊùêÊñô */}
              <div className="space-y-6">
                <div>
                  <h3 className="text-lg font-semibold text-gray-800 mb-3 flex items-center">
                    üîß ÊâÄÈúÄÂ∑•ÂÖ∑
                  </h3>
                  <div className="space-y-2">
                    {selectedRecipe.tools.map((tool, index) => (
                      <div key={index} className="flex items-center space-x-2 text-sm">
                        <div className="w-2 h-2 bg-blue-400 rounded-full"></div>
                        <span>{tool}</span>
                      </div>
                    ))}
                  </div>
                </div>

                <div>
                  <h3 className="text-lg font-semibold text-gray-800 mb-3 flex items-center">
                    ü•Ñ ÂáÜÂ§áÊ∏ÖÂçï
                  </h3>
                  <div className="space-y-3">
                    {selectedRecipe.ingredients.map((ingredient, index) => (
                      <div key={index} className="flex items-center justify-between p-3 bg-blue-50 rounded-lg border border-blue-100">
                        <div>
                          <span className="font-medium text-gray-800">{ingredient.name}</span>
                          {ingredient.note && (
                            <p className="text-xs text-gray-600 mt-1">{ingredient.note}</p>
                          )}
                        </div>
                        <Badge variant="secondary" className="bg-blue-200 text-blue-800">
                          {ingredient.amount}
                        </Badge>
                      </div>
                    ))}
                  </div>
                </div>
              </div>

              {/* ËÆ≠ÁªÉÊ≠•È™§ */}
              <div>
                <h3 className="text-lg font-semibold text-gray-800 mb-3 flex items-center">
                  üìã ËÆ≠ÁªÉÊ≠•È™§
                </h3>
                <div className="space-y-4">
                  {selectedRecipe.steps.map((step, index) => (
                    <div key={index} className="relative">
                      <div className="flex items-start space-x-4">
                        <div className="flex-shrink-0 w-8 h-8 bg-gradient-to-br from-blue-500 to-cyan-500 rounded-full flex items-center justify-center text-white font-bold text-sm">
                          {step.step}
                        </div>
                        <div className="flex-1">
                          <h4 className="font-semibold text-gray-800 mb-1">{step.action}</h4>
                          <p className="text-sm text-gray-600 mb-2">{step.detail}</p>
                          
                          {/* ÂêÑÁßçÊèêÁ§∫‰ø°ÊÅØ */}
                          {step.warning && (
                            <div className="flex items-start space-x-2 p-2 bg-red-50 border border-red-200 rounded text-xs text-red-700 mb-2">
                              <AlertTriangle className="w-3 h-3 mt-0.5 flex-shrink-0" />
                              <span>{step.warning}</span>
                            </div>
                          )}
                          
                          {step.pro_tip && (
                            <div className="flex items-start space-x-2 p-2 bg-blue-50 border border-blue-200 rounded text-xs text-blue-700 mb-2">
                              <Lightbulb className="w-3 h-3 mt-0.5 flex-shrink-0" />
                              <span><strong>‰∏ì‰∏öÊèêÁ§∫Ôºö</strong>{step.pro_tip}</span>
                            </div>
                          )}
                          
                          {step.visual_clue && (
                            <div className="flex items-start space-x-2 p-2 bg-green-50 border border-green-200 rounded text-xs text-green-700 mb-2">
                              <Eye className="w-3 h-3 mt-0.5 flex-shrink-0" />
                              <span><strong>ËßÜËßâÊèêÁ§∫Ôºö</strong>{step.visual_clue}</span>
                            </div>
                          )}
                          
                          {step.success_sign && (
                            <div className="flex items-start space-x-2 p-2 bg-emerald-50 border border-emerald-200 rounded text-xs text-emerald-700 mb-2">
                              <Star className="w-3 h-3 mt-0.5 flex-shrink-0" />
                              <span><strong>ÊàêÂäüÊ†áÂøóÔºö</strong>{step.success_sign}</span>
                            </div>
                          )}
                          
                          {step.purpose && (
                            <div className="flex items-start space-x-2 p-2 bg-gray-50 border border-gray-200 rounded text-xs text-gray-700 mb-2">
                              <span><strong>ÁõÆÁöÑÔºö</strong>{step.purpose}</span>
                            </div>
                          )}
                          
                          {step.timing && (
                            <div className="flex items-start space-x-2 p-2 bg-pink-50 border border-pink-200 rounded text-xs text-pink-700 mb-2">
                              <span><strong>Êó∂Êú∫Ôºö</strong>{step.timing}</span>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="text-center mb-8">
        <h2 className="text-3xl font-bold text-gray-800 mb-2">üèÉ‚Äç‚ôÇÔ∏è ÁßëÂ≠¶ËøêÂä®ÂÅ•Ë∫´ÊåáÂçó</h2>
        <p className="text-gray-600">‰∏ì‰∏öËÆ≠ÁªÉÊñπÊ°àÔºåÂ°ëÈÄ†ÂÅ•Â∫∑‰ΩìÈ≠Ñ</p>
      </div>

      <Card className="p-8 bg-white/80 backdrop-blur-sm shadow-xl border-0">
        {/* Step 1: Body Part */}
        <div className="mb-12">
          <div className="flex items-center gap-3 mb-6">
            <span className="text-2xl">1Ô∏è‚É£</span>
            <h2 className="text-2xl font-bold text-gray-800">ÈÄâÊã©ÈîªÁÇºÈÉ®‰Ωç</h2>
            <span className="text-sm text-gray-500 bg-gray-100 px-3 py-1 rounded-full">ÂçïÈÄâ</span>
          </div>
          <p className="text-gray-600 mb-4">„ÄåÁõÆÊ†áËÇåÁæ§„Äç</p>
          <div className="flex flex-wrap gap-3">
            {bodyPartOptions.map((option) => (
              <OptionButton
                key={option.value}
                option={option}
                isSelected={selectedBodyPart === option.value}
                onClick={() => setSelectedBodyPart(option.value)}
                colorScheme="blue"
              />
            ))}
          </div>
        </div>

        {/* Step 2: Equipment */}
        <div className="mb-12">
          <div className="flex items-center gap-3 mb-6">
            <span className="text-2xl">2Ô∏è‚É£</span>
            <h2 className="text-2xl font-bold text-gray-800">ÈÄâÊã©ÊâãËæπÁöÑÂô®Êùê</h2>
            <span className="text-sm text-gray-500 bg-gray-100 px-3 py-1 rounded-full">ÂçïÈÄâ</span>
          </div>
          <p className="text-gray-600 mb-4">„ÄåËÆ≠ÁªÉÂ∑•ÂÖ∑„Äç</p>
          <div className="flex flex-wrap gap-3">
            {sportEquipmentOptions.map((option) => (
              <OptionButton
                key={option.value}
                option={option}
                isSelected={selectedSportEquipment === option.value}
                onClick={() => setSelectedSportEquipment(option.value)}
                colorScheme="blue"
              />
            ))}
          </div>
        </div>

        {/* Step 3: Intensity */}
        <div className="mb-12">
          <div className="flex items-center gap-3 mb-6">
            <span className="text-2xl">3Ô∏è‚É£</span>
            <h2 className="text-2xl font-bold text-gray-800">ÈÄâÊã©ËøêÂä®Âº∫Â∫¶</h2>
            <span className="text-sm text-gray-500 bg-gray-100 px-3 py-1 rounded-full">ÂçïÈÄâ</span>
          </div>
          <p className="text-gray-600 mb-4">„ÄåËÆ≠ÁªÉÂº∫Â∫¶„Äç</p>
          <div className="flex flex-wrap gap-3">
            {intensityOptions.map((option) => (
              <OptionButton
                key={option.value}
                option={option}
                isSelected={selectedIntensity === option.value}
                onClick={() => setSelectedIntensity(option.value)}
                colorScheme="blue"
              />
            ))}
          </div>
        </div>

        {/* Step 4: Duration */}
        <div className="mb-12">
          <div className="flex items-center gap-3 mb-6">
            <span className="text-2xl">4Ô∏è‚É£</span>
            <h2 className="text-2xl font-bold text-gray-800">ÈÄâÊã©ËøêÂä®Êó∂Èïø</h2>
            <span className="text-sm text-gray-500 bg-gray-100 px-3 py-1 rounded-full">ÂçïÈÄâ</span>
          </div>
          <p className="text-gray-600 mb-4">„ÄåËÆ≠ÁªÉÊó∂Èó¥„Äç</p>
          <div className="flex flex-wrap gap-3">
            {durationOptions.map((option) => (
              <OptionButton
                key={option.value}
                option={option}
                isSelected={selectedDuration === option.value}
                onClick={() => setSelectedDuration(option.value)}
                colorScheme="blue"
              />
            ))}
          </div>
        </div>

        {/* ÁîüÊàêÈÖçÊñπÂ±ïÁ§∫Âå∫Âùó */}
        {selectedBodyPart && selectedSportEquipment && selectedIntensity && selectedDuration && (
          <div className="mb-8 p-6 bg-gradient-to-r from-blue-50 to-cyan-50 rounded-2xl border border-blue-200">
            <div className="text-center mb-4">
              <h3 className="text-xl font-bold text-gray-800 flex items-center justify-center gap-2">
                üéØ ‰Ω†ÁöÑ‰∏ìÂ±ûËøêÂä®ÈÖçÊñπ
              </h3>
              <p className="text-sm text-gray-600 mt-2">Ê†πÊçÆ‰Ω†ÁöÑÂÅèÂ•ΩÁîüÊàêÁöÑ‰∏™ÊÄßÂåñÈÖçÊñπ</p>
            </div>
            <div className="bg-white p-6 rounded-xl shadow-sm">
              <div className="mb-4">
                <h4 className="text-lg font-semibold text-blue-700 mb-2">{selectedBodyPart} √ó {selectedSportEquipment}</h4>
                <p className="text-gray-600 text-sm mb-3">{selectedIntensity}Ôºå{selectedDuration}</p>
              </div>
              <div className="mb-4">
                <h5 className="font-semibold text-gray-800 mb-2">üèãÔ∏è ËÆ≠ÁªÉÂª∫ËÆÆ</h5>
                {getMatchedSportRecipe() ? (
                  <div>
                    <div className="font-bold text-blue-800 mb-2">{getMatchedSportRecipe().name}</div>
                    <div className="text-gray-700 text-sm mb-2">{getMatchedSportRecipe().description}</div>
                    <div className="text-xs text-gray-500 mb-2">{getMatchedSportRecipe().subtitle}</div>
                    <div className="mb-2">
                      <span className="font-semibold">ÊâÄÈúÄÂô®ÊùêÔºö</span>
                      {getMatchedSportRecipe().tools.join('Ôºå')}
                    </div>
                    <div className="mb-2">
                      <span className="font-semibold">ÂáÜÂ§áÊ∏ÖÂçïÔºö</span>
                      {getMatchedSportRecipe().ingredients.map((ing: any) => `${ing.name}Ôºà${ing.amount}Ôºâ`).join('Ôºå')}
                    </div>
                    <div className="mb-2">
                      <span className="font-semibold">ËÆ≠ÁªÉÊ≠•È™§Ôºö</span>
                      <ol className="list-decimal ml-5">
                        {getMatchedSportRecipe().steps.map((step: any) => (
                          <li key={step.step} className="mb-1">{step.action}Ôºö{step.detail}</li>
                        ))}
                      </ol>
                    </div>
                    {getMatchedSportRecipe().warning && (
                      <div className="text-xs text-red-600 mt-2">‚ö†Ô∏è {getMatchedSportRecipe().warning}</div>
                    )}
                  </div>
                ) : (
                  <p className="text-gray-700 text-sm leading-relaxed">ÊöÇÊó†ËØ¶ÁªÜÂª∫ËÆÆÔºåËØ∑Â∞ùËØïÂÖ∂‰ªñÁªÑÂêà„ÄÇ</p>
                )}
              </div>
            </div>
          </div>
        )}

        {/* Êé®Ëçê/ÊäΩÂç°Âå∫Âùó */}
        <div className="mt-16 p-6 bg-gradient-to-r from-blue-50 to-cyan-50 rounded-2xl border border-blue-200">
          <div className="text-center mb-6">
            <h3 className="text-xl font-bold text-gray-800 flex items-center justify-center gap-2">
              üé≤ ÈÄâÊã©Âõ∞ÈöæÔºüÊäΩÂç°Áõ¥Êé•ÁªÉÔºÅ
            </h3>
            <p className="text-sm text-gray-600 mt-2">ÂèëÁé∞Êõ¥Â§öËøêÂä®ËÆ≠ÁªÉÊñπÊ≥ï</p>
          </div>
          <div className="grid md:grid-cols-3 gap-4 text-sm mb-6">
            {randomRecipes.map((recommendation) => (
              <div 
                key={recommendation.id}
                onClick={() => setSelectedRecipe(recommendation)}
                className="text-center p-4 bg-white rounded-lg shadow-sm cursor-pointer hover:shadow-md transition-all duration-200 hover:scale-105"
              >
                <div className="text-2xl mb-2">{recommendation.emoji}</div>
                <div className="font-semibold text-gray-800 mb-2">{recommendation.name}</div>
                <div className="text-gray-600 mb-2">{recommendation.subtitle}</div>
                <div className="text-xs text-blue-600">{recommendation.difficulty}</div>
                {recommendation.warning && (
                  <div className="text-xs text-red-600 mt-1 flex items-center justify-center gap-1">
                    <AlertTriangle className="w-3 h-3" />
                    ÂÆâÂÖ®ÊèêÈÜí
                  </div>
                )}
              </div>
            ))}
          </div>
          <div className="text-center">
            <Button
              onClick={handleRandomize}
              className="bg-gradient-to-r from-blue-500 to-cyan-500 hover:from-blue-600 hover:to-cyan-600 text-white px-6 py-2 rounded-full text-sm font-medium shadow-md hover:shadow-lg transition-all duration-200"
            >
              <RefreshCw className="w-4 h-4 mr-2" />
              Êç¢‰∏ÄÊç¢
            </Button>
          </div>
        </div>

        {/* ËØ¶ÁªÜËÆ≠ÁªÉÊñπÊ°àÂ±ïÁ§∫Âå∫Âùó */}
        {selectedRecipe && (
          <div className="mt-8 p-6 bg-white rounded-xl shadow-lg border border-blue-200">
            <div className="mb-6">
              <div className="flex items-center gap-3 mb-3">
                <span className="text-3xl">{selectedRecipe.emoji}</span>
                <div>
                  <h4 className="text-xl font-bold text-gray-800">{selectedRecipe.name}</h4>
                  <div className="flex items-center gap-4 text-sm text-gray-600">
                    <span>ÈöæÂ∫¶: {selectedRecipe.difficulty}</span>
                    <span className="flex items-center gap-1">
                      <Clock className="w-4 h-4" />
                      ËÆ≠ÁªÉÊó∂Èó¥: {selectedRecipe.time}
                    </span>
                    <span className="flex items-center gap-1">
                      <Users className="w-4 h-4" />
                      {selectedRecipe.servings}
                    </span>
                  </div>
                </div>
              </div>
              {selectedRecipe.warning && (
                <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg">
                  <div className="flex items-center gap-2 text-red-700 font-semibold mb-2">
                    <AlertTriangle className="w-5 h-5" />
                    {selectedRecipe.warning}
                  </div>
                  {selectedRecipe.safety && (
                    <ul className="text-sm text-red-600 space-y-1">
                      {selectedRecipe.safety.map((item, index) => (
                        <li key={index} className="flex items-start gap-2">
                          <span className="text-red-500 mt-1">‚Ä¢</span>
                          {item}
                        </li>
                      ))}
                    </ul>
                  )}
                </div>
              )}
              <div className="grid md:grid-cols-2 gap-6 mb-6">
                <div>
                  <h5 className="font-semibold text-gray-800 mb-3 flex items-center gap-2">
                    üõ†Ô∏è ÊâÄÈúÄÂô®Êùê
                  </h5>
                  <ul className="text-sm text-gray-600 space-y-1">
                    {selectedRecipe.tools.map((tool, index) => (
                      <li key={index} className="flex items-center gap-2">
                        <span className="w-2 h-2 bg-blue-400 rounded-full"></span>
                        {tool}
                      </li>
                    ))}
                  </ul>
                </div>
                <div>
                  <h5 className="font-semibold text-gray-800 mb-3 flex items-center gap-2">
                    ü•Ñ ÂáÜÂ§áÊ∏ÖÂçï
                  </h5>
                  <ul className="text-sm text-gray-600 space-y-2">
                    {selectedRecipe.ingredients.map((ingredient, index) => (
                      <li key={index} className="flex justify-between items-start">
                        <span className="font-medium">{ingredient.name}</span>
                        <div className="text-right">
                          <div className="font-semibold text-blue-600">{ingredient.amount}</div>
                          <div className="text-xs text-gray-500">{ingredient.note}</div>
                        </div>
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            </div>
            <div>
              <h5 className="font-semibold text-gray-800 mb-4 flex items-center gap-2">
                üìã ËÆ≠ÁªÉÊ≠•È™§
              </h5>
              <div className="space-y-4">
                {selectedRecipe.steps.map((step, index) => (
                  <div key={index} className="flex gap-4 p-4 bg-gray-50 rounded-lg">
                    <div className="flex-shrink-0 w-8 h-8 bg-blue-500 text-white rounded-full flex items-center justify-center font-bold text-sm">
                      {step.step}
                    </div>
                    <div className="flex-1">
                      <h6 className="font-semibold text-gray-800 mb-2">{step.action}</h6>
                      <p className="text-sm text-gray-700 mb-2">{step.detail}</p>
                      {step.warning && (
                        <div className="text-xs text-red-600 bg-red-50 p-2 rounded border border-red-200 mb-2">
                          ‚ö†Ô∏è {step.warning}
                        </div>
                      )}
                      {step.visual_clue && (
                        <div className="text-xs text-blue-600 bg-blue-50 p-2 rounded border border-blue-200 mb-2">
                          üëÅÔ∏è ËßÜËßâÊèêÁ§∫: {step.visual_clue}
                        </div>
                      )}
                      {step.success_sign && (
                        <div className="text-xs text-green-600 bg-green-50 p-2 rounded border border-green-200 mb-2">
                          ‚úÖ ÊàêÂäüÊ†áÂøó: {step.success_sign}
                        </div>
                      )}
                      {step.pro_tip && (
                        <div className="text-xs text-blue-600 bg-blue-50 p-2 rounded border border-blue-200">
                          üí° ‰∏ì‰∏öÊäÄÂ∑ß: {step.pro_tip}
                        </div>
                      )}
                      {step.time_control && (
                        <div className="text-xs text-indigo-600 bg-indigo-50 p-2 rounded border border-indigo-200">
                          ‚è±Ô∏è Êó∂Èó¥ÊéßÂà∂: {step.time_control}
                        </div>
                      )}
                      {step.purpose && (
                        <div className="text-xs text-purple-600 bg-purple-50 p-2 rounded border border-purple-200">
                          üéØ ÁõÆÁöÑ: {step.purpose}
                        </div>
                      )}
                      {step.technique && (
                        <div className="text-xs text-orange-600 bg-orange-50 p-2 rounded border border-orange-200">
                          üîß ÊäÄÂ∑ß: {step.technique}
                        </div>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}
      </Card>
    </div>
  );
}